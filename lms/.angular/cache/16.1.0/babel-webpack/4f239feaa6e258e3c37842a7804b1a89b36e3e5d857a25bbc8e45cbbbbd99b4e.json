{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.books = new BehaviorSubject([]);\n    this.searchCount = new BehaviorSubject(0);\n    this.filterCount = new BehaviorSubject(0);\n    this.apiUrl = 'https://example.com/api/books';\n  }\n  getBooks() {\n    return this.http.get(this.apiUrl);\n  }\n  getSearchCount() {\n    return this.searchCount.asObservable();\n  }\n  getFilterCount() {\n    return this.filterCount.asObservable();\n  }\n  searchBooks(searchQuery) {\n    return this.books.pipe(map(books => {\n      // Filter the books based on the search query\n      return books.filter(book => {\n        const searchTerm = searchQuery.toLowerCase();\n        // Check if the book name, author, genre, or year of publishing contains the search query\n        return book.name.toLowerCase().includes(searchTerm) || book.author.toLowerCase().includes(searchTerm) || book.genre.toLowerCase().includes(searchTerm) || book.year.toString().includes(searchTerm);\n      });\n    }));\n  }\n  filterBooks(criteria, pageNumber, pageSize) {\n    const params = new HttpParams().set('criteria', criteria);\n    return this.http.get('/api/books', {\n      params\n    }).pipe(map(books => {\n      this.books.next(books);\n      this.filterCount.next(books.length);\n      return books;\n    }));\n  }\n  getSearchSuggestions(query) {\n    const params = new HttpParams().set('query', query);\n    return this.http.get('/api/search-suggestions', {\n      params\n    });\n  }\n  getBookDetailsByName(bookName) {\n    return this.books.pipe(map(books => books.find(book => book.name === bookName)));\n  }\n}\nBookService.ɵfac = function BookService_Factory(t) {\n  return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookService,\n  factory: BookService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpParams","BehaviorSubject","map","BookService","constructor","http","books","searchCount","filterCount","apiUrl","getBooks","get","getSearchCount","asObservable","getFilterCount","searchBooks","searchQuery","pipe","filter","book","searchTerm","toLowerCase","name","includes","author","genre","year","toString","filterBooks","criteria","pageNumber","pageSize","params","set","next","length","getSearchSuggestions","query","getBookDetailsByName","bookName","find","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Sree\\lib\\lms\\src\\app\\book.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Book } from './book.model';\nimport { map } from 'rxjs/operators';\nimport { SearchBook } from './book.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  private books: BehaviorSubject<SearchBook[]> = new BehaviorSubject<SearchBook[]>([]);\n  private searchCount: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n  private filterCount: BehaviorSubject<number> = new BehaviorSubject<number>(0);\n\n  private apiUrl = 'https://example.com/api/books'; \n\n\n  constructor(private http: HttpClient) {}\n\n  getBooks(): Observable<Book[]> {\n    return this.http.get<Book[]>(this.apiUrl);\n  }\n\n  getSearchCount(): Observable<number> {\n    return this.searchCount.asObservable();\n  }\n\n  getFilterCount(): Observable<number> {\n    return this.filterCount.asObservable();\n  }\n\n  searchBooks(searchQuery: string): Observable<SearchBook[]> {\n    return this.books.pipe(\n      map(books => {\n        // Filter the books based on the search query\n        return books.filter(book => {\n          const searchTerm = searchQuery.toLowerCase();\n          // Check if the book name, author, genre, or year of publishing contains the search query\n          return (\n            book.name.toLowerCase().includes(searchTerm) ||\n            book.author.toLowerCase().includes(searchTerm) ||\n            book.genre.toLowerCase().includes(searchTerm) ||\n            book.year.toString().includes(searchTerm)\n          );\n        });\n      })\n    );\n  }\n  \n  \n\n  filterBooks(criteria: string, pageNumber: number, pageSize: number): Observable<Book[]> {\n    const params = new HttpParams().set('criteria', criteria);\n    return this.http.get<Book[]>('/api/books', { params }).pipe(\n      map(books => {\n        this.books.next(books);\n        this.filterCount.next(books.length);\n        return books;\n      })\n    );\n  }\n\n  getSearchSuggestions(query: string): Observable<string[]> {\n    const params = new HttpParams().set('query', query);\n    return this.http.get<string[]>('/api/search-suggestions', { params });\n  }\n\n  getBookDetailsByName(bookName: string): Observable<SearchBook | undefined> {\n    return this.books.pipe(\n      map((books: SearchBook[]) => books.find((book: SearchBook) => book.name === bookName) as SearchBook | undefined)\n    );\n  }\n  \n\n}\n"],"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,eAAe,QAAoB,MAAM;AAElD,SAASC,GAAG,QAAQ,gBAAgB;;;AAOpC,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPhB,KAAAC,KAAK,GAAkC,IAAIL,eAAe,CAAe,EAAE,CAAC;IAC5E,KAAAM,WAAW,GAA4B,IAAIN,eAAe,CAAS,CAAC,CAAC;IACrE,KAAAO,WAAW,GAA4B,IAAIP,eAAe,CAAS,CAAC,CAAC;IAErE,KAAAQ,MAAM,GAAG,+BAA+B;EAGT;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAS,IAAI,CAACF,MAAM,CAAC;EAC3C;EAEAG,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACL,WAAW,CAACM,YAAY,EAAE;EACxC;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACN,WAAW,CAACK,YAAY,EAAE;EACxC;EAEAE,WAAWA,CAACC,WAAmB;IAC7B,OAAO,IAAI,CAACV,KAAK,CAACW,IAAI,CACpBf,GAAG,CAACI,KAAK,IAAG;MACV;MACA,OAAOA,KAAK,CAACY,MAAM,CAACC,IAAI,IAAG;QACzB,MAAMC,UAAU,GAAGJ,WAAW,CAACK,WAAW,EAAE;QAC5C;QACA,OACEF,IAAI,CAACG,IAAI,CAACD,WAAW,EAAE,CAACE,QAAQ,CAACH,UAAU,CAAC,IAC5CD,IAAI,CAACK,MAAM,CAACH,WAAW,EAAE,CAACE,QAAQ,CAACH,UAAU,CAAC,IAC9CD,IAAI,CAACM,KAAK,CAACJ,WAAW,EAAE,CAACE,QAAQ,CAACH,UAAU,CAAC,IAC7CD,IAAI,CAACO,IAAI,CAACC,QAAQ,EAAE,CAACJ,QAAQ,CAACH,UAAU,CAAC;MAE7C,CAAC,CAAC;IACJ,CAAC,CAAC,CACH;EACH;EAIAQ,WAAWA,CAACC,QAAgB,EAAEC,UAAkB,EAAEC,QAAgB;IAChE,MAAMC,MAAM,GAAG,IAAIhC,UAAU,EAAE,CAACiC,GAAG,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IACzD,OAAO,IAAI,CAACxB,IAAI,CAACM,GAAG,CAAS,YAAY,EAAE;MAAEqB;IAAM,CAAE,CAAC,CAACf,IAAI,CACzDf,GAAG,CAACI,KAAK,IAAG;MACV,IAAI,CAACA,KAAK,CAAC4B,IAAI,CAAC5B,KAAK,CAAC;MACtB,IAAI,CAACE,WAAW,CAAC0B,IAAI,CAAC5B,KAAK,CAAC6B,MAAM,CAAC;MACnC,OAAO7B,KAAK;IACd,CAAC,CAAC,CACH;EACH;EAEA8B,oBAAoBA,CAACC,KAAa;IAChC,MAAML,MAAM,GAAG,IAAIhC,UAAU,EAAE,CAACiC,GAAG,CAAC,OAAO,EAAEI,KAAK,CAAC;IACnD,OAAO,IAAI,CAAChC,IAAI,CAACM,GAAG,CAAW,yBAAyB,EAAE;MAAEqB;IAAM,CAAE,CAAC;EACvE;EAEAM,oBAAoBA,CAACC,QAAgB;IACnC,OAAO,IAAI,CAACjC,KAAK,CAACW,IAAI,CACpBf,GAAG,CAAEI,KAAmB,IAAKA,KAAK,CAACkC,IAAI,CAAErB,IAAgB,IAAKA,IAAI,CAACG,IAAI,KAAKiB,QAAQ,CAA2B,CAAC,CACjH;EACH;;AA9DWpC,WAAW,C;mBAAXA,WAAW,EAAAsC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXzC,WAAW,C;SAAXA,WAAW;EAAA0C,OAAA,EAAX1C,WAAW,CAAA2C,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}